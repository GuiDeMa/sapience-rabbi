/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./src/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Lock: { // root type
    blockHeight?: number | null; // Int
    id?: string | null; // String
    satoshis?: number | null; // Int
    txid?: string | null; // String
  }
  Message: { // root type
    app?: string | null; // String
    content?: string | null; // String
    contentType?: string | null; // String
    id?: string | null; // String
    inReplyTo?: string | null; // String
    paymail?: string | null; // String
    txid?: string | null; // String
  }
  Post: { // root type
    app?: string | null; // String
    content?: string | null; // String
    contentType?: string | null; // String
    id?: string | null; // String
    inReplyTo?: string | null; // String
    paymail?: string | null; // String
    txid?: string | null; // String
  }
  Query: {};
  User: { // root type
    address?: string | null; // String
    id?: string | null; // String
    paymail?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Lock: { // field return type
    blockHeight: number | null; // Int
    id: string | null; // String
    message: NexusGenRootTypes['Message'] | null; // Message
    post: NexusGenRootTypes['Post'] | null; // Post
    satoshis: number | null; // Int
    txid: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  Message: { // field return type
    app: string | null; // String
    content: string | null; // String
    contentType: string | null; // String
    id: string | null; // String
    inReplyTo: string | null; // String
    locks: Array<NexusGenRootTypes['Lock'] | null> | null; // [Lock]
    paymail: string | null; // String
    txid: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  Post: { // field return type
    app: string | null; // String
    content: string | null; // String
    contentType: string | null; // String
    id: string | null; // String
    inReplyTo: string | null; // String
    locks: Array<NexusGenRootTypes['Lock'] | null> | null; // [Lock]
    paymail: string | null; // String
    txid: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  Query: { // field return type
    ok: boolean; // Boolean!
  }
  User: { // field return type
    address: string | null; // String
    id: string | null; // String
    locks: Array<NexusGenRootTypes['Lock'] | null> | null; // [Lock]
    messages: Array<NexusGenRootTypes['Message'] | null> | null; // [Message]
    paymail: string | null; // String
    posts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
  }
}

export interface NexusGenFieldTypeNames {
  Lock: { // field return type name
    blockHeight: 'Int'
    id: 'String'
    message: 'Message'
    post: 'Post'
    satoshis: 'Int'
    txid: 'String'
    user: 'User'
  }
  Message: { // field return type name
    app: 'String'
    content: 'String'
    contentType: 'String'
    id: 'String'
    inReplyTo: 'String'
    locks: 'Lock'
    paymail: 'String'
    txid: 'String'
    user: 'User'
  }
  Post: { // field return type name
    app: 'String'
    content: 'String'
    contentType: 'String'
    id: 'String'
    inReplyTo: 'String'
    locks: 'Lock'
    paymail: 'String'
    txid: 'String'
    user: 'User'
  }
  Query: { // field return type name
    ok: 'Boolean'
  }
  User: { // field return type name
    address: 'String'
    id: 'String'
    locks: 'Lock'
    messages: 'Message'
    paymail: 'String'
    posts: 'Post'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}