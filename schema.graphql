### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type Block {
  height: Int!
  id: Int!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Lock {
  app: String
  blockHeight: BigInt!
  id: Int!
  lockTarget: Post
  lockTargetByTxid: String!
  locker: User!
  satoshis: BigInt!
  txid: String!
  unixtime: Int!
  vibes: Float!
}

input LockOrderByInput {
  unixtime: Sort
}

type Mutation {
  block(height: Int!): Block!
  lock(app: String, blockHeight: Int!, lockTargetByTxid: String!, lockerByUserAddress: String!, lockerByUserPaymail: String, satoshis: Int!, txid: String!, unixtime: Int!): Lock!
  post(app: String, channel: String, content: String!, contentType: String!, inReplyToTx: String, postedByUserAddress: String!, postedByUserPaymail: String, txid: String!, type: String!, unixtime: Int!): Post!
  user(address: String!, paymail: String): User!
}

type Post {
  app: String
  channel: String
  content: String!
  contentType: String!
  id: Int!
  inReplyTo: Post
  postedBy: User!
  txid: String!
  type: String!
  unixtime: Int!
}

input PostOrderByInput {
  unixtime: Sort
}

type Query {
  allLocks(filter: String, orderBy: [LockOrderByInput!], skip: Int, take: Int): allLocks!
  allPosts(filter: String, orderBy: [PostOrderByInput!], skip: Int, take: Int): allPosts!
  allUsers(filter: String, orderBy: [UserOrderByInput!], skip: Int, take: Int): allUsers!
}

enum Sort {
  asc
  desc
}

type User {
  address: String!
  id: Int!
  locks: [Lock!]!
  paymail: String
  posts: [Post!]!
}

input UserOrderByInput {
  locks: Sort
}

type allLocks {
  count: Int!
  id: ID
  locks: [Lock!]!
}

type allPosts {
  count: Int!
  id: ID
  posts: [Post!]!
}

type allUsers {
  count: Int!
  id: ID
  users: [User!]!
}